/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package bookings;

import io.muserver.*;
import io.muserver.handlers.ResourceHandlerBuilder;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.time.DateTimeException;
import org.json.JSONObject;

public class App {
    static String defaultDB = "bookings.db";
    static String defaultIndex = "index.html";

    static void createNewDB(String fileName) {
        java.io.File f = new java.io.File(fileName);
        if (f.exists()) {
            throw new RuntimeException(fileName + " already exists");
        }

        String url = "jdbc:sqlite:" + fileName;

        try (Connection conn = DriverManager.getConnection(url)) {
            if (conn != null) {
                Statement statement = conn.createStatement();
                statement.setQueryTimeout(30);

                statement.executeUpdate("DROP TABLE IF EXISTS bookings");
                statement.executeUpdate("CREATE TABLE bookings (day TEXT NOT NULL, time TEXT NOT NULL, name TEXT NOT NULL, size INTEGER NOT NULL)");
                statement.executeUpdate("CREATE INDEX IF NOT EXISTS bookings_day ON bookings (day)");
            }

        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    static String checkDayString(String s) {
        if (s == null || s.length() > 10) {
            return null;
        }
        String regex = "^(2[0-9][0-9][0-9])-(0?[1-9]|1[0-2])-(0?[1-9]|[1-2]?[0-9]|3[0-1])$";
        if (!s.matches(regex)) {
            return null;
        }
        String[] matches = s.split("-");
        int year = Integer.parseInt(matches[0]);
        int month = Integer.parseInt(matches[1]);
        int day = Integer.parseInt(matches[2]);
        try {
            java.time.LocalDate.of(year, month, day);
        } catch (DateTimeException e) {
            return null;
        }
        return String.format("%04d-%02d-%02d", year, month, day);
    }

    static String checkTimeString(String s) {
        System.err.println("Info: Checking time string " + s);
        if (s == null || s.length() > 10) {
            return null;
        }
        String regex = "^([0-1]?[0-9]|2[0-3]):([0-5]?[0-9])$";
        if (!s.matches(regex)) {
            return null;
        }
        String[] matches = s.split(":");
        int hour = Integer.parseInt(matches[0]);
        int min = Integer.parseInt(matches[1]);
        return String.format("%02d:%02d:00", hour, min);
    }

    public static void main(String[] args) {
        java.io.File f = new java.io.File(defaultDB);
        if (!f.exists()) {
            createNewDB(defaultDB);
        }
        String db_url = "jdbc:sqlite:" + defaultDB;

        try {
            Connection conn = DriverManager.getConnection(db_url);
            if (conn != null) {
                MuServer server = MuServerBuilder.httpServer()
                    .withHttpPort(8000)
                    .addHandler(ResourceHandlerBuilder.fileHandler("./"))
                    .addHandler(new BookingsPostHandler(conn))
                    .addHandler(Method.GET, "v1/bookings", (request, response, pathParams) -> {
                        System.out.println("BookingsGetHandler");
                        String day = request.query().get("day");
                        if (day != null) {
                            // Validate day since it is user input
                            String checkedDay = checkDayString(day);
                            if (checkedDay == null) {
                                // Bad request
                                System.out.println("Info: Bad day");
                                response.status(400);
                                return;
                            }
                            String sql = "SELECT day, time, name, size FROM bookings WHERE day = ?";
                            try {
                                PreparedStatement p = conn.prepareStatement(sql);
                                p.setString(1, checkedDay);
                                ResultSet rs = p.executeQuery();
                                System.out.println("Info: Ran query for " + checkedDay);
                                while (rs.next()) {
                                    JSONObject json = new JSONObject();
                                    json.put("day", rs.getString("day"));
                                    json.put("time", rs.getString("time"));
                                    json.put("name", rs.getString("name"));
                                    json.put("size", rs.getInt("size"));
                                    response.sendChunk(json.toString() + "\n");
                                    System.err.println("Info: day = " + rs.getString("day"));
                                }
                            } catch (SQLException e) {
                                System.out.println(e.getMessage());
                            }
                        } else {
                            String sql = "SELECT day, time, name, size FROM bookings";
                            try {
                                PreparedStatement p = conn.prepareStatement(sql);
                                ResultSet rs = p.executeQuery();
                                while (rs != null && rs.next()) {
                                    JSONObject json = new JSONObject();
                                    json.put("day", rs.getString("day"));
                                    json.put("time", rs.getString("time"));
                                    json.put("name", rs.getString("name"));
                                    json.put("size", rs.getInt("size"));
                                    response.sendChunk(json.toString() + "\n");
                                }
                            } catch (SQLException e) {
                                System.out.println(e.getMessage());
                            }
                        }
                    })
                    .start();
                System.out.println("Server started at " + server.uri());
            } else {
                throw new RuntimeException("null connection to database");
            }
        } catch (SQLException e) {
            System.out.println(e.getMessage());
        }
    }

    static class BookingsPostHandler implements MuHandler {
        private final Connection conn;

        public BookingsPostHandler(Connection conn) {
            this.conn = conn;
        }

        public boolean handle(MuRequest request, MuResponse response) {
            if (!request.method().equals(Method.POST) || !request.uri().getPath().equals("/v1/bookings")) {
                return false;
            }

            System.err.println("Info: BookingsPostHandler running");

            String day = checkDayString(request.query().get("day"));
            if (day == null) {
                response.status(400);
                response.write("Invalid day " + request.query().get("day"));
                return true;
            }

            System.err.println("Info: BookingsPostHandler validated day");

            RequestParameters form;
            try {
                form = request.form();
            } catch (IOException e) {
                response.status(400);
                System.out.println("IO exception when fetch from data" + e);
                return true;
            }

            String time = checkTimeString(form.get("time"));
            if (time == null) {
                response.status(400);
                response.write("Invalid time" + form.get("time"));
                return true;
            }

            String name = form.get("name");
            if (name == null || name.isBlank()) {
                response.status(400);
                response.write("Missing name");
                return true;
            }
            name = name.trim().replaceAll("\n", " ");

            int size = form.getInt("size", 0);
            if (size == 0) {
                response.status(400);
                response.write("Missing or invalid table size");
                return true;
            }

            System.err.println("Info: BookingsPostHandler validated form data");

            // This only works if the bookings are of the same length
            // We need a different technique if bookings can have different length
            // See if there are any bookings that start less that 2 hours before and after requested slot
            try {
                String insertWhereNotSql = "INSERT INTO bookings (day, time, name, size) SELECT ?1, ?2, ?3, ?4 WHERE NOT EXISTS (SELECT 1 FROM bookings WHERE day = ?1 AND (unixepoch(?2, '-02:00') < unixepoch(time) AND unixepoch(time) < unixepoch(?2, '+02:00')))";
                PreparedStatement p = conn.prepareStatement(insertWhereNotSql);
                p.setString(1, day);
                p.setString(2, time);
                p.setString(3, name);
                p.setInt(4, size);
                int count = p.executeUpdate();
                if (count > 0) {
                    response.status(201);
                    response.write("Added new booking");
                } else {
                    response.status(409);
                    response.write("Selected slot overlaps with another booking");
                }
            } catch (SQLException e) {
                response.status(500);
                System.out.println(e.getMessage());
            }

            return true;
        }
    }
}
